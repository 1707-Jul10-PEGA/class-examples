SET SERVEROUTPUT ON

CREATE OR REPLACE FUNCTION CALC_TAX(T_ID IN NUMBER, TAX IN NUMBER)
  RETURN NUMBER AS
  TOTAL_PRICE NUMBER(10, 2);
  BEGIN
    SELECT UNITPRICE INTO TOTAL_PRICE FROM TRACK WHERE TRACKID = T_ID;
    RETURN TOTAL_PRICE + (TOTAL_PRICE * TAX);
  END;
/

DECLARE
  T_ID NUMBER;
  TAX NUMBER;
  v_Return NUMBER;
BEGIN
  SELECT TRACKID INTO T_ID FROM TRACK WHERE NAME = 'God';
  TAX := .45;
  v_Return := CALC_TAX(T_ID, TAX);
  DBMS_OUTPUT.PUT_LINE(v_Return);
END;

INSERT INTO INVOICELINE 
  VALUES(
    10000, 
    324, 
    (SELECT TRACKID FROM TRACK WHERE NAME = 'God'),
    CALC_TAX((SELECT TRACKID FROM TRACK WHERE NAME = 'God'), .45),
    5);
    
    SELECT * FROM INVOICELINE WHERE INVOICELINEID = 10001;
    
  COMMIT;
  
  CREATE OR REPLACE PROCEDURE INSERT_INVOICELINE
  (
    TRACKNAME IN VARCHAR2,
    TAX IN NUMBER,
    INVOICELINEID NUMBER,
    INVOICEID NUMBER,
    QUANTITY NUMBER,
    UPDATED_ROW OUT SYS_REFCURSOR
  ) AS
  BEGIN
    INSERT INTO INVOICELINE 
      VALUES(
      INVOICELINEID, 
      INVOICEID, 
      (SELECT MAX(TRACKID) FROM TRACK WHERE NAME = TRACKNAME),
      CALC_TAX((SELECT MAX(TRACKID) FROM TRACK WHERE NAME = TRACKNAME), TAX),
      QUANTITY);
    OPEN UPDATED_ROW FOR SELECT * FROM INVOICELINE 
      WHERE INVOICELINEID = 
      (SELECT MAX(INVOICELINEID) FROM INVOICELINE);
  END;
  /

DECLARE
  TRACKNAME VARCHAR2(255);
  TAX NUMBER;
  INVOICELINEID NUMBER;
  INVOICEID NUMBER;
  QUANTITY NUMBER;
  TRACKID NUMBER;
  UPDATED_ROW SYS_REFCURSOR;
  
  BEGIN
    TRACKNAME := 'Snowblind';
    TAX := .07;
    INVOICELINEID := 10002;
    INVOICEID := 324;
    QUANTITY := 10;
    INSERT_INVOICELINE(TRACKNAME, TAX, INVOICELINEID, INVOICEID, QUANTITY, UPDATED_ROW);
   
    LOOP
      FETCH UPDATED_ROW INTO INVOICELINEID, INVOICEID, TRACKID, TAX, QUANTITY;
    EXIT WHEN UPDATED_ROW%NOTFOUND;
    
    DBMS_OUTPUT.PUT_LINE('TRACKID: ' || TRACKID || ' TOTAL COST: ' || TAX);
    
    END LOOP;
    
    CLOSE UPDATED_ROW;
    
END;
    
  END;
    /